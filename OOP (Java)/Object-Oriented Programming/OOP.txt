## 개체지향 프로그래밍 (OOP, Object-Oriented Programming)

프로그래밍 패러다임 중 하나   
프로그램을 구성하는 기본 요소를 개체로 보려는 노력   
OOP에서 프로그램이란?   
 - 상호작용하는 개체들의 집합
 - 절차적 프로그래밍은 실행할 명령의 목록을 프로그램으로 봤음

### 개체지향 프로그래밍 vs 절차적 프로그래밍

#### 절차적 프로그래밍은 매우 직관적
 - 기계어는 위에서 아래로 차례대로 실행됨
 - 어셈블리 명령어는 거의 모든 경우 기계어로 1:1치환 가능
 - C언어로 작성한 코드 한 줄은 보통 어셈블리 명령어 몇개로 치환 가능
 - 함수 호출은 특정 메모리 위치로 jmp해서 순서대로 명령어를 실행하는 것
 - 그 명령어 실행 결과에 따라 레지스터 또는 메모리에 저장된 데이터가 변경

절차적 프로그래밍은 기계가 기준!
따라서 매우 객관적이며 이 패러다임에 프로그래머의 주관이 개입할 여지가 매우 적음   
즉, 절차적 프로그래밍은 실제 하드웨어가 도는 방식과 비슷   

개체지항 프로그래밍은 사람이 기준!
OOP는 기계처럼이 아니라 **사람처럼** 생각하자는 패러다임   
하지만 *사람처럼* 이라는 말 자체가 매우 **주관적**   
그리고 사회와 기술이 발전함에 따라 사람들의 사고방식도 변함   

**어떤 프로그램이라도 최종적으로는 절차적으로 돔**

### OOP는 주관적

70+년 역사 동안 다양한 학설 및 의견이 등장하고 사라짐   
개체에 대한 정의조차 다양했음   
오늘날에도 어떤 자료를 보고 배웠냐에 따라 OOP의 정의를 달리함   
 - 어떤 시대에 나온 자료를 봤는가?
 - 어느 쪽 진영에서 주장한 내용을 봤는가?
 - 심지어 여러 진영의 상충되는 주장을 답습해서 모순된 주장을 하는 사람도 있음

### OOP토론 시 피해야 할 사람
**처음 듣는 주장을 하며 "그건 <U>올바른</U> OOP가 아니야!"라고 하는 사람**   
 - 보통 특정 소수설의 관점을 지지하는 사람
 - 소수설을 무조건 배제해야 하는가?
    - 역사적 가치가 있는 주장도 꽤 있음
    - 특수한 상황에서는 다수설보다 올바른 방법이기도 함
    - 허나 일반적인 상황에서는 더 해가 되기 쉬움

**"이건 <U>순수</U> OOP언어가 아니야"라고 하는 사람**
 - 모두가 동의하는 순수 OOP정의는 존재하지 않음
 - 모두가 동의하는 최소한의 특성은 있음
 - 순수 OOP를 주장하는 사람들의 흔한 패턴 [모두가 동의하는 최소한의 특성] + [자신이 지지하는 언어에만 있는 몇가지 특성]

**"<U>모든</U> 프로그램은 OOP로 만들어야 해!" 라고 하는 사람**
 - OOP가 절차적 프로그래밍을 완전히 대체할 거라는 주장도 있었음
    - 새로운 기법이 처음 등장할 때 많이 보이는 잘못된 주장
    - 훌륭한 프로그래머들은 이런말에 속지 않음
    - 문제 해결에 가장 효율적인 방법을 사용하면 끝
 - 이미 역사적으로 사실이 아님이 증명됨(모든 프로그램을 OOP가 대체하지 못함)
 - 허나 OOP가 주류가 되었고 앞으로도 한동안 그럴 예정

**"<U>어떠한 누구가 이리 말했으니</U> 이게 맞고 너는 틀려" 라고 하는 사람**
 - 흔한 논리적 오류 : 그릇된 권위에 호소
 - 예 : '~책에 따르면'
    - 프로그래밍 분야에서도 허황된 자기계발서 책이 꽤 있음
      - 읽으면 기분은 좋아짐
      - 이 방식만 따르면 된다는 달콤한 주장
    - 이런 달콤한 주장에 속아 넘어가는 프로그래머들도 있음
    - 해당 내용에 대한 객관적인 증거를 제시하지 못하면 무시해도됨
 - 제대로 된 실무자 또는 학자라면 **과학적 사고방식**을 따름

**"<U>이 방법만 따르면</U> 문제가 해결돼!" 라고 하는 사람**
 - 역시 허황된 자기계발서나 약장수들이 하는 말
 - 모든 방법에는 장점과 단점이 있음
 - **단점을 제대로 말하지 못하는 사람은 믿고 걸러도 됨**
 - 훌륭한 프로그래머는 해결하려는 문제에 적절한 도구를 사용
    - 모든 문제를 해결할 수 있는 절대반지는 존재하지 않음
    - 문제를 발견했을 때 새로운 해법을 빠르게 찾아 습득하는 능력이 더 중요
 - 기본기의 중요성