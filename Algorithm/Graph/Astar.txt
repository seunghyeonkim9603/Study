A* 알고리듬

다익스트라와 기본은 같은 알고리듬
하지만 쓸데없는 평가는 피할 수 있음
이를 위해 다음 노드 선택시 기준을 하나 더 추가
다익스트라의 기준은 시작점부터 노드까지의 거리
A*가 추가한 기준은 그 노드로 부터 목적지까지의 거리

1. 그래프에 있는 모든 노드의 g(n)과 f(n)을 INF로 초기화
2. g(s) = 0, f(s) = h(s)
3. 시작 노드 s를 OPEN에 추가
4. OPEN에서 f(n)이 가장 작은 노드를 찾아 제거
4. n의 각 이웃m에 대해 시작점->n->m이 더 짧은 경로라면
-g(m)을 업데이트
-m을 OPEN에 추가
6. 목적지에 도달하거나 OPEN이 빌 때까지 4~5번 과정을 반복


현재 노드부터 목적지까지의 거리

목적지까지 탐색을 다 하기 전까지는 확실히 모름
따라서 A*가 추가한 기준은 결정적이 아님
-휴리스틱, 근사치
이 휴리스틱 함수에 따라 A*성능이 달라짐
대부분의 경우 다익스트라 보다 빠름
-실세계의 대표 경로 찾기 알고리듬이 A*인 이유
-하지만 데이터 따라 느릴 수도 있음

A*알고리듬의 두 가지 노드 선택 기준
g(n) : 시작 노드부터 노드 n까지의 거리 (실제 값)
h(n) : n노드부터 목적지 노드까지의 거리(추정치)
f(n) : 시작 노드부터 목적지 노드까지의 거리 (추정치)
f(n) = g(n) + h(n)
다음 노드 선택 시
-다익스트라는 g(n)이 최소 인것을 선택
-A*는 f(n)이 최소인 것을 선택

A*의 h(n)
계속 목적지 방향으로 나아가고 싶음
= 목적지 쪽에 있는 노드를 우선적으로 선택하고 싶음
= 목적지 쪽에 있는 노드의 h(n)이 더 작아야함
= 목적지에 가까운 노드의 h(n)이 더 작아야함

즉 h(n)은 거리 함수
모든 상황에 최고인 함수는 없음
상황에 따라 선택 ex) 유클리드 거리 , 맨해튼 거리

다익스트라와의 차이점
OPEN이라는 이름의 노드 집합이 있음
-방문할 최단 경로 후보 노드들이 들어있음
OPEN안에 있는 후보선택시 최소 f(n)을 사용
같은 노드를 두번이상 방문할 수 있음

A*가 중복 방문을 허용하는 이유

다익스트라는 새로 방문하는 노드의 실제거리가 최소
-실제 거리 g(n)만 노드를 뽑는 기준으로 사용하기 때문
-이미 최소기에 더 이상 작아질 수 없음
A*는 새로 방문하는 노드의 거리가 실제 거리가 아님
-h(n)으로 추정하는 부분이 있음
-지금 최소 거리라 믿고 뽑는 노드가 실제로는 최소가 아닐 수 있음
그러나 h(n)이 특정 조건을 만족하면 노드를 한번씩만 방문함
-일관적/단조로운 휴리스틱