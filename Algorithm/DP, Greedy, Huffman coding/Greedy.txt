그리디 알고리듬

그 순간 locally optimal한 해법을 찾는 방법
그러나 최종적으로 globally optimal한 해법이 안 나올 수도 있음
opproximation 알고리듬이기 때문에 성능향상을 위해 사용하기도 한다.

그리디 알고리듬의 장점

최종적으로 최적인 해법을 못찾을 수도 있으나
충분히 훌륭한 결정을 빨리 도출할 수 있음

그리디 알고리듬을 사용하기 적합한 경우

globally optimal 한 해법을 구하는 알고리듬의 복잡도가 너무 높은 경우
적당히 좋은 해법도 상관없는 경우
동적 계획법을 사용 할 수 없는 경우 -> 즉, 중복되는 하위 문제가 없음


그리디 알고리듬을 사용할 수 있는 경우
1. 최적 부분 구조
2. 그리디 선택 속성 : 한 번 내린 결정은 다시 돌아보지 않음
과거의 선택은 현재 선택에 영향을 미칠 수 있으나
미래의 선택은 현재 선택에 영향을 안미침

팁
보통 최소/최대화 문제
여러 그리디 선택이 가능하면 모두 시도 혹은 반례를 통해 제거할 것
정렬을 해야 속도가 빨라질 수도 있음

그리디 접근법으로 풀 수 있는 문제

인터벌 파티셔닝
지연 시간 최소화
다익스트라 최단 경로
운영체제의 job스케줄링
k-센터 문제
결정트리 학습법
허프만 코딩
외 다수