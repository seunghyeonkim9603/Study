동적 계획법 (dynamic programming, DP)

"특별한 속성"을 가진 복잡한 문제를 간단한 하위문제로 나눠서 푸는 방법

top-down 동적 계획법

최종적으로 도출하고자 하는 문제에서 시작하여
필요에 따라 재귀적으로 하위 문제를 푼다.
두번 이상 평가되는 문제는 메모이제이션 기법을 사용하여 계산을 생략한다.
하위 문제를 평가하는 최적의 순서를 알 필요가 없다.

메모이제이션 (memoization)
계산 결과를 캐시에 저장해 둔 뒤, 후에 재사용 하는 기법
-처음 계산할 때 그 결과를 캐시에 저장
-최적화 캐싱 기법 중 하나
보통 함수가 매개변수에 따라 반환하는 값을 캐싱하는 것을 지칭

동적 계획법과 메모이제이션

메모이제이션 : 실행된 결과를 기억해뒀다가 재사용하는 최적화 기법
동적 계획법 : 복잡한 문제를 하위 문제로 쪼개서 재귀적으로 푸는 방법
메모이제이션 != 동적계획법
동적계획법에서 주로 사용하는 기법이 메모이제이션일뿐 
같은 것은 아니다.


bottom-up 동적 계획법

가장 작은 문제부터 시작하여 그보다 하나 더 큰 문제를 풀어나가
최종적으로 도출하고자 하는 문제에 도달하여 푸는 방식
필요하지 않은 하위문제도 평가할 수 있으며
문제를 잘 분석해서 최적의 순서를 찾아야함
cpu캐시에 좀 더 친화적이고 재귀 함수호출을 피할 수 있어서
보통 top-down방식 보다 빠르다.

속도 향상은 거저오는 것이 아님을 알아야 한다.
메모이제이션/ 타뷸레이션은 속도 향상을 위해 메모리를 더 사용한다.
다른 경우에도 시간 복잡도와 공간 복잡도가 반비례인 관계가 있다.


동적 계획법을 적용할 수 있는 문제의 특징

1. 최적 부분 구조 (optimal substructure)
- 하위 문제의 최적해법으로부터 큰 문제의 최적 해법을 구할 수 있음
- 동적 계획법과 그리디 알고리듬의 유용성 판단에 사용
- 강화 학습에서 흔히 등장하는 벨만 방정식도 이에 기초

2. 하위 문제의 반복
- 똑같은 평가를 반복해야 함
- 하위 문제의 크기가 작아야함

분할 정복 vs 동적 계획법

큰 문제를 하위 문제로 나누어 하위문제의 최적해법을 합친다는 방법은 비슷하나
분할 정복은 동일한 하위 문제가 반복되지 않고 동적계획법은 동일한 하위 문제가 반복 된다.


동적 계획법으로 문제를 푸는 과정
1. 문제에 동적 계획법을 적용할 수 있는지 판단
2. 상태와 매개변수를 결정
3. 상태 간의 관계를 정립
4. 종료조건을 결정
5. 메모이제이션 또는 타뷸레이션을 추가

팁
보통 어떤 제약 하에 어떤 값을 최적화 (최대/최소)
재귀 함수에 동일한 매개변수가 반복적으로 전달되는 경우
그리드를 만들려 해 볼 것 ( cell 안의 값이 보통 최적화 하려는 값 )
- 문제를 하위 문제로 어떻게 나눌지 생각하면 그리드의 x/y축을 결정하는데 도움이 된다.

어떤 문제가 동적 계획법이 적용가능하지 판단하는 것은 매우 어려운일이다.
그러므로 그냥 문제를 많이 풀어봐야 한다.

동적 계획법으로 풀 수 있는 문제들
-최단 경로 찾기
-최장 공통부분 문자열
-와일드 카드 패턴 매칭
-부분집합 합
-레벤슈타인 거리
-연속 행렬 곱셈
-등 다수
